package model; 
// Define que esta classe pertence ao pacote 'model'.
// Isso √© √∫til para organiza√ß√£o de projetos maiores e separa√ß√£o por camadas (ex: model, view, controller).

import java.util.Scanner; 
// Importa a classe Scanner da biblioteca Java para permitir a entrada de dados pelo teclado.


// =========================
// SUPERCLASSE: Animal
// =========================
class Animal {
    String nome; // Armazena o nome do animal
    String cor;  // Armazena a cor do animal

    // Construtor que exige nome e cor ao criar um objeto Animal
    Animal(String nome, String cor) {
        // Valida√ß√£o: impede que um nome vazio ou nulo seja aceito
        if (nome == null || nome.isEmpty()) {
            throw new IllegalArgumentException("O nome n√£o pode ser vazio.");
            // 'throw' lan√ßa uma exce√ß√£o que impede a continua√ß√£o do programa se os dados forem inv√°lidos
        }

        // Inicializa os atributos com os valores recebidos como par√¢metro
        this.nome = nome;
        this.cor = cor; // Aceita cores nulas aqui, tratadas depois na subclasse
    }

    // M√©todo para exibir o nome do animal
    void mostrarNome() {
        System.out.println("O nome do animal √©: " + nome);
    }
}


// =========================
// SUBCLASSE: Cachorro
// =========================
class Cachorro extends Animal {
    
    // Construtor que chama a superclasse (Animal) e trata a cor se for nula ou vazia
    Cachorro(String nome, String cor) {
        super(nome, (cor == null || cor.isEmpty()) ? "Desconhecida" : cor);
        // Aqui usamos o operador tern√°rio: se 'cor' for vazia, usamos "Desconhecida" como padr√£o
    }

    // M√©todo espec√≠fico da subclasse, simulando o latido do cachorro
    void latir() {
        System.out.println(nome + " est√° latindo: Au Au!");
        // Acessa o atributo 'nome' herdado da superclasse
    }
}


// =========================
// CLASSE PRINCIPAL: TesteAnimal
// =========================
public class TesteAnimal {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in); 
        // Cria um objeto Scanner para permitir entrada de dados digitados no console

        // Solicita o nome do cachorro ao usu√°rio
        System.out.print("Digite o nome do cachorro: ");
        String nomeDoCachorro = scanner.nextLine(); 
        // Armazena a entrada do usu√°rio na vari√°vel 'nomeDoCachorro'

        // Solicita a cor do cachorro
        System.out.print("Digite a cor do cachorro: ");
        String cor = scanner.nextLine(); 
        // Armazena a cor digitada

        // Cria um objeto Cachorro com os dados fornecidos
        Cachorro meuCachorro = new Cachorro(nomeDoCachorro, cor);

        // =========================
        // PAUSA VISUAL NO TERMINAL
        // =========================
        System.out.println("\nüêæ Preparando as informa√ß√µes do cachorro...");
        // Mostra uma mensagem amig√°vel ao usu√°rio antes de apresentar os dados

        System.out.println("--------------------------------------------");
        // Linha de separa√ß√£o visual, para organizar melhor a sa√≠da

        try {
            Thread.sleep(1500); 
            // Cria uma pausa de 1,5 segundos para simular carregamento de dados
            // Pode ser √∫til pedagogicamente para destacar o momento da sa√≠da
        } catch (InterruptedException e) {
            // Caso ocorra uma interrup√ß√£o inesperada, esta mensagem ser√° exibida
            System.out.println("Pausa interrompida.");
        }

        // =========================
        // SA√çDA DE DADOS DO OBJETO
        // =========================
        System.out.println("\n=== Dados do Cachorro ===");
        // Cabe√ßalho visual para os dados que ser√£o exibidos

        meuCachorro.mostrarNome(); 
        // Chama o m√©todo herdado da superclasse que imprime o nome

        System.out.println("A cor do cachorro √©: " + meuCachorro.cor);
        // Acessa diretamente o atributo herdado 'cor' (visibilidade default)

        meuCachorro.latir(); 
        // M√©todo exclusivo da subclasse, simula o comportamento de um cachorro

        scanner.close(); 
        // Encerra o uso do Scanner ‚Äî pr√°tica recomendada para evitar vazamento de recursos
    }
}
