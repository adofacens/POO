package model;

import java.util.Scanner; // Importa Scanner para entrada de dados pelo usu√°rio

// ============================
// SUPERCLASSE: Veiculo
// ============================
class Veiculo {
    String marca;   // Armazena a marca do ve√≠culo
    String modelo;  // Armazena o modelo do ve√≠culo

    // Construtor com dois par√¢metros
    Veiculo(String marca, String modelo) {
        // Atribui os valores diretamente aos atributos da classe
        this.marca = marca;
        this.modelo = modelo;
    }

    // M√©todo que exibe marca e modelo do ve√≠culo
    void exibirInfo() {
        System.out.println("Marca: " + marca);
        System.out.println("Modelo: " + modelo);
    }
}

// ============================
// SUBCLASSE: Carro (herda de Veiculo)
// ============================
class Carro extends Veiculo { // uso do extends para heran√ßa
    // Atributos espec√≠ficos da subclasse Carro
    int ano;        // Ano de fabrica√ß√£o do carro
    String cor;     // Cor do carro

    // Construtor b√°sico com 2 par√¢metros (herda marca e modelo)
    Carro(String marca, String modelo) {
        super(marca, modelo);           // Chama o construtor da superclasse Veiculo
        this.ano = 0;                   // Define ano padr√£o como 0
        this.cor = "n√£o definida";      // Define cor padr√£o
    }

    // Construtor sobrecarregado com 4 par√¢metros
    Carro(String marca, String modelo, int ano, String cor) {
        super(marca, modelo);           // Reutiliza o construtor da superclasse
        this.ano = ano;
        this.cor = (cor == null || cor.isEmpty()) ? "Indefinida" : cor; // uso do ==  significa que o valor √© nulo ou vazio
        // uso do || significa que a cor √© nula ou vazia
        // Se a cor for nula ou vazia, define como "Indefinida"
        // Trata cor inv√°lida para evitar valor nulo
    }

    // M√©todo para exibir todos os dados do carro
    void exibirDetalhes() {
        System.out.println("===== DADOS COMPLETOS DO CARRO =====");
        exibirInfo(); // M√©todo herdado da superclasse
        System.out.println("Ano: " + (ano > 0 ? ano : "N√£o informado"));
        System.out.println("Cor: " + cor);
    }
}

// ============================
// CLASSE PRINCIPAL
// ============================
public class TesteCarro {
    public static void main(String[] args) {
        try (Scanner sc = new Scanner(System.in)) { // try -catch para evitar interrup√ß√£o inesperada
            System.out.println("üöó === SISTEMA DE CADASTRO DE CARROS ===");

            // Captura os dados da superclasse
            System.out.print("Digite a marca do carro: ");
            String marca = sc.nextLine().trim(); // .trim() remove espa√ßos antes/depois

            System.out.print("Digite o modelo do carro: ");
            String modelo = sc.nextLine().trim(); // Captura o modelo com . trim()
            // Valida√ß√£o simples: impede que marca ou modelo sejam vazios

            // Verifica se o usu√°rio deseja inserir dados extras
            System.out.print("Deseja informar o ano e a cor? (s/n): ");
            String resposta = sc.nextLine().trim().toLowerCase();

            Carro carro; // Declara√ß√£o do objeto Carro

            if (resposta.equals("s")) { // Se o usu√°rio quiser informar ano e cor
                // uso do .equals() para compara√ß√£o de strings
                // Captura ano e cor com tratamento de entrada vazia
                // Captura ano com valida√ß√£o simples
                System.out.print("Digite o ano do carro: ");
                int ano = 0;
                try {
                    ano = Integer.parseInt(sc.nextLine()); // Convers√£o direta
                } catch (NumberFormatException e) { // Tratamento de erro para entrada inv√°lida
                    // Uso do NumberFormatException para capturar erro de convers√£o
                    // Se o usu√°rio digitar algo que n√£o seja um n√∫mero, exibe mensagem
                    // Se a convers√£o falhar, define ano como 0 e exibe mensagem
                    System.out.println("Ano inv√°lido! Usando valor padr√£o (0).");
                }

                // Captura a cor com tratamento de entrada vazia
                System.out.print("Digite a cor do carro: ");
                String cor = sc.nextLine().trim();

                // Cria o objeto com todos os dados (usa construtor sobrecarregado)
                carro = new Carro(marca, modelo, ano, cor);

            } else { // else para o caso de n√£o querer dados extras
                // Se o usu√°rio n√£o quiser informar ano e cor, cria o objeto com dados b√°sicos
                // Cria o objeto com marca e modelo apenas
                carro = new Carro(marca, modelo);
            }

            // Pausa visual para separar entrada da exibi√ß√£o
            System.out.println("\nüîß Processando informa√ß√µes...");
            try { // try -catch para evitar interrup√ß√£o inesperada
                Thread.sleep(1000); // 1 segundo de pausa

            } catch (InterruptedException e) { // catch para exce√ß√£o de interrup√ß√£o e o uso InterruptedException para capturar a exce√ß√£o
                // Caso a pausa seja interrompida, exibe mensagem de erro
                // Exibe mensagem de erro se a pausa for interrompida
                System.out.println("Erro na pausa!"); // Mensagem de erro
            }

            // Exibe todos os dados do objeto Carro
            System.out.println();
            carro.exibirDetalhes(); // Chamada do m√©todo de exibi√ß√£o
        }
    }
}
